<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的个人博客</title>
  
  <subtitle>我的个人博客</subtitle>
  <link href="https://jinzbone.github.io/atom.xml" rel="self"/>
  
  <link href="https://jinzbone.github.io/"/>
  <updated>2024-08-22T15:49:24.349Z</updated>
  <id>https://jinzbone.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>接口自动化测试</title>
    <link href="https://jinzbone.github.io/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://jinzbone.github.io/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</id>
    <published>2024-08-22T12:49:33.000Z</published>
    <updated>2024-08-22T15:49:24.349Z</updated>
    
    <content type="html"><![CDATA[<style> body {    /* font-family: "宋体", SimSun, serif; */    font-size: 16px;  }   p {    line-height: 1.7;  }</style><p>接口测试和功能测试的区别：</p><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/dif.png" class="" title="alt text"><p>接口测试：通过 工具 或 代码 进行脚本开发，接口测试时就是执行这个脚本，把遇到的缺陷进行跟踪，测完之后提交测试报告。</p><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/jk-test-process.png" class="" title="alt text"><p>HTTP请求-请求头</p><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/http-header.png" class="" title="alt text"><p>HTTP响应-状态码</p><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/http-code.png" class="" title="alt text"><p>接口规范</p><ul><li>传统接口规范</li><li>Restful接口规范<img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/jkgf-style.png" class="" title="alt text"></li></ul><p><b>测试流程：</b><br>先测试<font color='red'>核心业务流程</font>，然后再测单模块，进行更加细致的测试。</p><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/cs-process.png" class="" title="alt text"><p>（1）测试接口业务流程</p><p>（2）</p><h2 id="Postman测试接口"><a href="#Postman测试接口" class="headerlink" title="Postman测试接口"></a>Postman测试接口</h2><h3 id="Postman中的公共容器：接口结果自动关联"><a href="#Postman中的公共容器：接口结果自动关联" class="headerlink" title="Postman中的公共容器：接口结果自动关联"></a>Postman中的公共容器：接口结果自动关联</h3><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/postman1.png" class="" title="alt text"><h3 id="Postman中的批量执行"><a href="#Postman中的批量执行" class="headerlink" title="Postman中的批量执行"></a>Postman中的批量执行</h3><p>把一套流程涉及的接口放到同一个集合中，然后执行这个集合</p><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/postmanbatch.png" class="" title="alt text"><h3 id="接口用例设计思路"><a href="#接口用例设计思路" class="headerlink" title="接口用例设计思路"></a>接口用例设计思路</h3><h4 id="单接口测试"><a href="#单接口测试" class="headerlink" title="单接口测试"></a>单接口测试</h4><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/danjiekou.png" class="" title="alt text"><p>（1）测试点<br>（2）针对测试点编写相应测试用例<br>（3）使用Postman进行接口测试</p><p>以“用户登陆”接口为例来说：<br>（1）测试点<br>    - 已注册正确的用户名和密码，登陆成功<br>    - 用户名或密码错误，登录失败，提示“用户名或密码错误”<br>    <img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/ceshidian.png" class="" title="alt text"><br>（2）针对测试点编写相应测试用例<br>    <img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/ceshiyongli.png" class="" title="alt text"><br>（3）使用Postman进行接口测试</p><h3 id="Postman中的断言"><a href="#Postman中的断言" class="headerlink" title="Postman中的断言"></a>Postman中的断言</h3><img src="/2024/08/22/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/postmanassert.png" class="" title="alt text"><ol><li><p>响应状态码断言</p></li><li><p>包含指定字符串断言</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
 body {
    /* font-family: &quot;宋体&quot;, SimSun, serif; */
    font-size: 16px;
  }
   p {
    line-height: 1.7;
  }
&lt;/style&gt;

&lt;p&gt;接口测试和功能测试</summary>
      
    
    
    
    <category term="测试" scheme="https://jinzbone.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://jinzbone.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2024阅读书单</title>
    <link href="https://jinzbone.github.io/2024/08/22/2024%E9%98%85%E8%AF%BB%E4%B9%A6%E5%8D%95/"/>
    <id>https://jinzbone.github.io/2024/08/22/2024%E9%98%85%E8%AF%BB%E4%B9%A6%E5%8D%95/</id>
    <published>2024-08-22T03:06:56.000Z</published>
    <updated>2024-08-22T12:47:45.572Z</updated>
    
    <content type="html"><![CDATA[<style> body {    /* font-family: "宋体", SimSun, serif; */    font-size: 16px;  }   p {    line-height: 1.7;  }</style><p>2024年阅读书单<br>阅读计划：每周1本，剩余22周</p><blockquote><p>认知类</p></blockquote><ol><li><p>《醒与悟》5册</p></li><li><p>《那不勒斯四部曲》</p></li></ol><ul><li><p>分类：文学</p></li><li><p>字数：，阅读时间：</p></li><li><p>简介：</p></li></ul><ol start="3"><li>《你为什么而工作》</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
 body {
    /* font-family: &quot;宋体&quot;, SimSun, serif; */
    font-size: 16px;
  }
   p {
    line-height: 1.7;
  }
&lt;/style&gt;

&lt;p&gt;2024年阅读书单</summary>
      
    
    
    
    <category term="阅读" scheme="https://jinzbone.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书单" scheme="https://jinzbone.github.io/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins教程</title>
    <link href="https://jinzbone.github.io/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/"/>
    <id>https://jinzbone.github.io/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/</id>
    <published>2024-08-20T15:49:37.000Z</published>
    <updated>2024-08-22T13:25:03.581Z</updated>
    
    <content type="html"><![CDATA[<style> body {    /* font-family: "宋体", SimSun, serif; */    font-size: 16px;  }   p {    line-height: 1.7;  }</style><h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><p>大多数互联网公司会使用Jenkins配合GitLab、Docker、K8s作为实现DevOps的核心工具。</p><blockquote><p>用Jenkins把整个环境跑起来需要至少4台虚拟机，16GB以上的运行内存</p></blockquote><p>持续集成（CI）：让软件代码可以持续集成到主干上，并自动构建和测试。</p><p>持续交付（CD）：让准备好发布的版本代码可以进行自动化部署。</p><p>使用Jenkins需要的前提技能：</p><ul><li>Docker</li><li>Git</li></ul><p>Jenkins安装：</p><ul><li><p>服务器安装GitLab（准备环境）</p></li><li><p>Jenkins宿主机安装Maven、JDK（需要配置）</p></li><li><p>通过Docker安装Jenkins</p></li><li><p>在Jenkins安装需要的插件（需要网络）</p></li><li><p>把jdk和maven挪到Jenkins的data目录并修改home目录</p></li></ul><p>1、在Linux服务器上装GitLab服务端（后面Jenkins也是要装在Linux环境的）</p><p>2、研发人员和Jenkins都安装GitLab客户端，研发人员访问GitLab服务器推送研发完的代码，Jenkins访问GitLab服务器拉取代码</p><p>Windows安装Ubuntu虚拟机</p><h2 id="服务器安装GitLab"><a href="#服务器安装GitLab" class="headerlink" title="服务器安装GitLab"></a>服务器安装GitLab</h2><ol><li><p><a herf="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">下载Gitlab的rpm包至本地</a>（本来要通过docker安装，但是网络下载不下来，就直接在服务器上安装了）</p></li><li><p>使用yum安装gitlab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh gitlab-ce-16.11.8-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p>编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p>把里面的<code>external</code>值改为服务器的IP和端口（就是之后你通过浏览器访问的地址）</p></li></ol><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/gitlab-ip.png" class="" title="alt text"><ol start="4"><li>启动GitLab<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li><li>查看默认登陆密码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure></li><li>浏览器登录</li></ol><p>访问地址就是gitlab.rb里配置的IP、端口，用户名就是root，密码就是你刚刚在上面看到的</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/gitlab-login.png" class="" title="alt text"><p>遇到的问题及解决方案：</p><ul><li><a herf="https://www.cnblogs.com/Mr-Worlf/p/16572629.html">GitLab启动完成后访问不到页面</a></li></ul><h2 id="宿主机通过Docker安装Jenkins"><a href="#宿主机通过Docker安装Jenkins" class="headerlink" title="宿主机通过Docker安装Jenkins"></a>宿主机通过Docker安装Jenkins</h2><ol><li><p>Docker下载jenkins社区版镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search jenkins/jenkins</span><br><span class="line">docker pull jenkins/jenkins <span class="comment">#下载需要等一会完成</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>编辑docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/docker/jenkins_docker <span class="comment">#这里是把docker-compose.yml单独放到了docker的jenkins文件夹里，实际使用时也可以放到springboot项目中</span></span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/:/var/jenkins_home/</span></span><br></pre></td></tr></table></figure></li><li><p>启动Jenkins</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker logs -f jenkins <span class="comment">#查看启动日志</span></span><br></pre></td></tr></table></figure></li><li><p>第一次启动会报错，没有data目录的权限，进行如下修改</p></li></ol><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/jenkins-data-noperm.png" class="" title="alt text"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 data</span><br></pre></td></tr></table></figure><ol start="5"><li><p>重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker logs -f jenkins <span class="comment">#查看启动日志</span></span><br></pre></td></tr></table></figure><p>等会就启动成功了</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/jenkins-success.png" class="" title="alt text"></li><li><p>浏览器访问，输入宿主机IP:刚刚在docker-compose.yml里配置的端口，用户名root，密码就是上面一步日志显示的</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/jenkins-login.png" class="" title="alt text"></li><li><p>安装常用Jenkins插件</p></li></ol><ul><li><p>Git Parameter</p></li><li><p>Publish Over SSH</p></li><li><p>Locale</p></li></ul><p>安装完插件之后重启Jenkins生效（方法是把浏览器地址后缀改为&#x2F;restart，然后回车、确认重启）</p><h2 id="Jenkins安装Maven、JDK"><a href="#Jenkins安装Maven、JDK" class="headerlink" title="Jenkins安装Maven、JDK"></a>Jenkins安装Maven、JDK</h2><ol><li>把Maven、JDK移动到Jenkins的data目录下</li></ol><h2 id="Jenkins发布项目-—-（一）自定义流程构建方式"><a href="#Jenkins发布项目-—-（一）自定义流程构建方式" class="headerlink" title="Jenkins发布项目 — （一）自定义流程构建方式"></a>Jenkins发布项目 — （一）自定义流程构建方式</h2><ol><li>配置GitLab代码仓库：推送本地代码到GitLab远程仓库</li></ol><p>然后重新构建，然后查看构建日志，成功的话可以在</p><ol start="2"><li>配置Maven构建代码：构建jar包</li></ol><p>GitLab代码仓库Build中选择maven，配置参数为</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/maven-build.png" class="" title="alt text"><p>重新构建，然后查看构建日志，成功的话可以在target下看到构建好的jar包</p><ol start="3"><li>推送jar包到远程服务器：Publish Over SSH</li></ol><p>3.1）配置目标服务器</p><p>在系统管理-全局设置中，配置SSH服务器，注意：需要加上密码，并测试连接。</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/target-server.png" class="" title="alt text"><p>3.2）配置transfer jar包到目标服务器</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/publish-over-ssh.png" class="" title="alt text"><p>然后重新构建，就能在目标服务器的路径下看到jar包了 </p><p>3.3）设置自动生成镜像、自动运行容器</p><p>注意两个点：</p><ul><li><p>写文件夹的绝对路径</p></li><li><p>运行端口不要和已经用的端口发生冲突</p></li></ul><p>3.4）基于版本号拉取、构建项目 — 实践中可以根据版本号快速把线上系统回滚到前一个版本</p><p>1、配置Git Parameter为根据tag拉取</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/gitparameter.png" class="" title="alt text"><p>2、maven构建之前增加shell，根据代码tag构建相应版本的代码</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/checkout.png" class="" title="alt text"><ol start="4"><li>集成SonarQube</li></ol><p>下载SonarQube镜像，开启SonarQube容器</p><ol start="5"><li>集成Harbor</li></ol><p>5.1）手动推送镜像到Harbor</p><p> 想要把镜像推送到Harbor仓库中：</p><p> 1、镜像命名规则必须符合：<code>harbor地址/harbor项目名/镜像名:版本号</code>，然后才能将其推送到指定Harbor仓库中（注意：不是直接修改镜像名，还是同一个镜像，只不过该镜像追加一个符合上述规则的标识）<br> <img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/harbor-tag.png" class="" title="alt text"></p><p> 2、在<code>daemon.json</code>中配置好Harbor地址<br> <img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/harbor-daemon.png" class="" title="alt text"><br> 注意重启Docker：<code>systemctl restart docker</code></p><p> 3、登陆Harbor、推送<br> <img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/harbor-push.png" class="" title="alt text"></p><p> 4、测试从Harbor仓库拉取镜像到本地</p><p> <code>docker pull harbor地址/harbor项目名/镜像名:版本号</code></p> <img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/harbor-pull.png" class="" title="alt text"><blockquote><p>这个<code>CREATED</code>是这个镜像最初始创建的时间，不是拉取时间。</p></blockquote><p>5.2）自动推送镜像到Harbor</p><p>1、配置Jenkin能使用Dockers命令</p><ul><li>设置文件<code>/var/run/docker.sock</code>的所属用户组和权限：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> root:root docker.sock</span><br><span class="line"><span class="built_in">chmod</span> o+rw docker.sock</span><br></pre></td></tr></table></figure><ul><li><p>修改jenkins的docker-compose.yml文件中的目录映射：</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/jenkins-docker-set.png" class="" title="alt text"></li><li><p>进入Jenkins内部执行docker命令看看能用吗</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/jenkins-docker-cmd.png" class="" title="alt text"></li></ul><p>2、修改Jenkins流程</p><ul><li><p>删掉“构建后部署”相关的文件传输、启动容器操作</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/del-deploy.png" class="" title="alt text"></li><li><p>添加一步执行shell的步骤，用于制作部署包的镜像</p></li></ul><p><font color="red"> 注意：这个步骤一定要放在 构建后操作 - Send build artifacts over SSH，否则会一直报错找不到<code>deploy.sh</code>文件！！！</font></p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/deploy.png" class="" title="alt text"><p>之前我放在了<code>Build Steps</code>里，一直报错找不到deploy.sh文件。。。</p><p>deploy.sh实现的功能：</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/deploy-instruction.png" class="" title="alt text"><p>deploy.sh样例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">harbor_addr=<span class="variable">$1</span></span><br><span class="line">harbor_repo=<span class="variable">$2</span></span><br><span class="line">project=<span class="variable">$3</span></span><br><span class="line">version=<span class="variable">$4</span></span><br><span class="line">host_port=<span class="variable">$5</span></span><br><span class="line">container_port=<span class="variable">$6</span></span><br><span class="line"></span><br><span class="line">imageName=<span class="variable">$harbor_addr</span>/<span class="variable">$harbor_repo</span>/<span class="variable">$project</span>:<span class="variable">$version</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$imageName</span></span><br><span class="line"></span><br><span class="line">containerId=`docker ps -a | grep <span class="variable">$&#123;project&#125;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$containerId</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$containerId</span>&quot;</span> != <span class="string">&quot;&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  docker stop <span class="variable">$containerId</span></span><br><span class="line">  docker <span class="built_in">rm</span> <span class="variable">$containerId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">tag=`docker images | grep <span class="variable">$&#123;project&#125;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$tag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$tag</span>&quot;</span> =~ <span class="string">&quot;<span class="variable">$version</span>&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">  docker rmi <span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker login -u admin -p Harbor12345 <span class="variable">$harbor_addr</span></span><br><span class="line"></span><br><span class="line">docker pull <span class="variable">$imageName</span></span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="variable">$host_port</span>:<span class="variable">$container_port</span> --name <span class="variable">$project</span> <span class="variable">$imageName</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Jenkins发布项目-—-（二）流水线方式"><a href="#Jenkins发布项目-—-（二）流水线方式" class="headerlink" title="Jenkins发布项目 — （二）流水线方式"></a>Jenkins发布项目 — （二）流水线方式</h2><p>1、在Jenkins中安装插件<code>Pipeline Stage View</code>然后重启，可以看到阶段视图</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/pipeline-stage-view.png" class="" title="alt text"><h3 id="集成钉钉机器人"><a href="#集成钉钉机器人" class="headerlink" title="集成钉钉机器人"></a>集成钉钉机器人</h3><p>1、在钉钉群里加一个自定义机器人，记下关键词、webhook地址</p><p>2、在Jenkins安装<code>DingTalk</code>插件，然后配上这个地址</p><p>3、在流水线代码里加上状态通知逻辑</p><p>注意：post和stages是同级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            dingtalk(</span><br><span class="line">                robot: <span class="string">&#x27;Jenkins-DingDing&#x27;</span>,</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&#x27;MARKDOWN&#x27;</span>,</span><br><span class="line">                title: <span class="string">&quot;success: <span class="variable">$&#123;JOB_NAME&#125;</span>&quot;</span>,</span><br><span class="line">                text: [<span class="string">&quot;- 成功构建：<span class="variable">$&#123;JOB_NAME&#125;</span>！ \n - 版本：<span class="variable">$&#123;tag&#125;</span> \n - 持续时间：<span class="variable">$&#123;currentBuild.durationString&#125;</span> &quot;</span>]</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            dingtalk(</span><br><span class="line">                robot: <span class="string">&#x27;Jenkins-DingDing&#x27;</span>,</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&#x27;MARKDOWN&#x27;</span>,</span><br><span class="line">                title: <span class="string">&quot;failed: <span class="variable">$&#123;JOB_NAME&#125;</span>&quot;</span>,</span><br><span class="line">                text: [<span class="string">&quot;- 构建失败：<span class="variable">$&#123;JOB_NAME&#125;</span>！ \n - 版本：<span class="variable">$&#123;tag&#125;</span> \n - 持续时间：<span class="variable">$&#123;currentBuild.durationString&#125;</span> &quot;</span>]</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、之后再构建代码，就会用钉钉机器人自动推送成功\失败的消息了</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/dingding.png" class="" title="alt text"><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul><li><b>Jenkins系统配置中配置GitLab时，正确输入了Gitlab host URL和Credentials，但是点击“Test Connection”时，始终报错Client error: HTTP 302 Found </b></li></ul><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/gitlab-error1.png" class="" title="alt text"><p>原因：host URL的问题</p><p>解决方法： host URL换成服务器的ip</p><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/gitlab-error2.png" class="" title="alt text"><ul><li><b>在SonarQube这一步，一直报错<code>ERROR: SonarQube server [http://localhost:9000] can not be reached</code>但我之前已经在Jenkins的全局配置中设置过SonarQube Server的IP，并且之前也能正常用。。。</b></li></ul><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/sonar-error.png" class="" title="alt text"><p>原因（GPT分析出来的）： Jenkins 全局配置未正确应用，如果你已经在 Jenkins 全局配置中配置了 SonarQube 的 IP 地址，确保在 Pipeline 脚本中正确使用该配置。</p><p>解决办法：在流水线语法中加入代码withSonarQubeEnv指定SonarCube容器名</p><p>之前代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 3、通过SonarQube质量检测</span><br><span class="line">        stage(<span class="string">&#x27;通过SonarQube质量检测&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                  sh <span class="string">&#x27;/var/jenkins_home/sonar-scanner/bin/sonar-scanner -Dsonar.source=./ -Dsonar.projectname=$&#123;JOB_NAME&#125; -Dsonar.projectKey=$&#123;JOB_NAME&#125; -Dsonar.java.binaries=./target/ -Dsonar.login=b97b6c88608579e149179754b87fb1ba4e855896&#x27;</span></span><br><span class="line">                  <span class="built_in">echo</span> <span class="string">&#x27;通过SonarQube质量检测 - SUCCESS&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改之后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 3、通过SonarQube质量检测</span><br><span class="line">        stage(<span class="string">&#x27;通过SonarQube质量检测&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withSonarQubeEnv(<span class="string">&#x27;sonarqube&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&#x27;/var/jenkins_home/sonar-scanner/bin/sonar-scanner -Dsonar.source=./ -Dsonar.projectname=$&#123;JOB_NAME&#125; -Dsonar.projectKey=$&#123;JOB_NAME&#125; -Dsonar.java.binaries=./target/ -Dsonar.login=b97b6c88608579e149179754b87fb1ba4e855896&#x27;</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&#x27;通过SonarQube质量检测 - SUCCESS&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><b> 通过流水线在部署最后这一步经常报错：ERROR: Exception when publishing, exception message [Exec exit status not zero. Status [125]]</b><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">SSH: Connecting from host [b580d7d980cc]</span><br><span class="line">SSH: Connecting with configuration [deploy129] ...</span><br><span class="line">SSH: Creating session: username [root], hostname [192.168.126.129], port [22]</span><br><span class="line">SSH: Connecting session ...</span><br><span class="line">SSH: Connected</span><br><span class="line">SSH: Opening <span class="built_in">exec</span> channel ...</span><br><span class="line">SSH: EXEC: channel open</span><br><span class="line">SSH: EXEC: STDOUT/STDERR from <span class="built_in">command</span> [deploy.sh <span class="variable">$harborAddress</span> <span class="variable">$harborRepo</span> pipeline v4.0.1 8085 8080] ...</span><br><span class="line">SSH: EXEC: connected</span><br><span class="line">pipeline/v4.0.1/8085:8080</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Error response from daemon: Get <span class="string">&quot;https://pipeline/v2/&quot;</span>: dial tcp: lookup pipeline on 192.168.126.2:53: no such host</span><br><span class="line">Error response from daemon: pull access denied <span class="keyword">for</span> pipeline/v4.0.1/8085, repository does not exist or may require <span class="string">&#x27;docker login&#x27;</span>: denied: requested access to the resource is denied</span><br><span class="line">docker: no port specified: :&lt;empty&gt;.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br><span class="line">SSH: EXEC: completed after 26,496 ms</span><br><span class="line">SSH: Disconnecting configuration [deploy129] ...</span><br><span class="line">ERROR: Exception when publishing, exception message [Exec <span class="built_in">exit</span> status not zero. Status [125]]</span><br><span class="line">[Pipeline] <span class="built_in">echo</span></span><br><span class="line">通过 Publish Over SSH 通知目标服务器 - SUCCESS</span><br></pre></td></tr></table></figure></li></ul><p>原因一直不好查到。。。3个注意点：</p><p>1）在SSH server中设置 verbose 开启，这样构建日志会显示shell的详细错误日志</p><p>2）写流水线语法在部署这一步有错误，用的是jenkins自带的配置<br>我需要写的是这段：</p><p><code>deploy.sh $harborAddress $harborRepo $JOB_NAME $tag $host_port $container_port</code></p><p>流水线语法自动生成的是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">&#x27;deploy129&#x27;</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">&#x27;&#x27;</span>, execCommand: <span class="string">&#x27;deploy.sh $harborAddress $harborRepo $JOB_NAME $tag $host_port $container_port&#x27;</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">&#x27;[, ]+&#x27;</span>, remoteDirectory: <span class="string">&#x27;&#x27;</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">&#x27;&#x27;</span>, sourceFiles: <span class="string">&#x27;&#x27;</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">true</span>)])</span><br></pre></td></tr></table></figure><p>但是一直报错，ERROR: Exception when publishing, exception message [Exec exit status not zero. Status [125]]，经过GPT排查后，是生成代码里面<code>execCommand</code>后面的内容应该用双引号<code>&quot;</code>而不是单引号<code>&#39;</code>，修改如下才正常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">&#x27;deploy129&#x27;</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">&#x27;&#x27;</span>, execCommand: <span class="string">&quot;deploy.sh <span class="variable">$harborAddress</span> <span class="variable">$harborRepo</span> <span class="variable">$JOB_NAME</span> <span class="variable">$tag</span> <span class="variable">$host_port</span> <span class="variable">$container_port</span>&quot;</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">&#x27;[, ]+&#x27;</span>, remoteDirectory: <span class="string">&#x27;&#x27;</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">&#x27;&#x27;</span>, sourceFiles: <span class="string">&#x27;&#x27;</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">true</span>)])</span><br></pre></td></tr></table></figure><ul><li><b> 整个流程都很顺利，但是，部署的代码版本并不是最新的，虽然确定GitLab中是最新代码、构建日志中也都是按最新tag拉取、构建的，但是最后在页面访问的时候还是旧版本 </b><br>原因：缓存</li></ul><p>解决方法：</p><p>1）docker build的时候加上参数 <code>--no-cache</code></p><p>2）清除所有缓存！慎重！！需要确认，会删除所有未启动的容器的镜像！！！<br><code>docker system prune -a</code></p><p>3）流水线中用的相对路径不对，改为绝对路径之后就可以了。</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> ./target/*.jar ./docker/</span><br><span class="line">docker build --no-cache -t <span class="variable">$JOB_NAME</span>:<span class="variable">$tag</span> ./docker/</span><br></pre></td></tr></table></figure><img src="/2024/08/20/Jenkins%E6%95%99%E7%A8%8B/path-rela.png" class="" title="alt text">]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
 body {
    /* font-family: &quot;宋体&quot;, SimSun, serif; */
    font-size: 16px;
  }
   p {
    line-height: 1.7;
  }
&lt;/style&gt;

&lt;h1 id=&quot;Jenk</summary>
      
    
    
    
    <category term="Jenkins" scheme="https://jinzbone.github.io/categories/Jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://jinzbone.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>你为什么而工作</title>
    <link href="https://jinzbone.github.io/2024/08/20/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/"/>
    <id>https://jinzbone.github.io/2024/08/20/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/</id>
    <published>2024-08-20T13:54:18.000Z</published>
    <updated>2024-08-22T12:47:48.437Z</updated>
    
    <content type="html"><![CDATA[<style> body {    /* font-family: "宋体", SimSun, serif; */    font-size: 16px;  }   p {    line-height: 1.7;  }</style><ul><li><p>没钱当然没人愿意工作，但钱却不是我们工作的首要原因。通常情况下，我们认为因钱而工作是一个糟糕的工作动因。事实上，当我们谈论一个人是因为钱而工作时，我们并不仅仅是在客观描述，而是夹杂了批判的情感在内。</p></li><li><p>想过尽可能舒适的生活是每个人的天性，如果一个人从事某项繁重工作和他不做所获得的报酬没有任何差别的话，那么他就会粗心马虎地应付差事，而政府也默认这种行事原则。</p></li><li><p>只要人们是为了钱而工作，他们从事什么样的工作便显得无关紧要。只要将劳动力划分为微小的单元，社会就将产生巨大的生产效率。</p></li><li><p>斯金纳的实验结果表明，通过操控奖励的数量和频率能够准确、有效地控制动物们的表现。</p></li><li><p>人们当然并不享受大头针工厂中的这种工作，但他们同样也不愿意在其他任何地方工作。”亚当·斯密想要告诉我们的是，人们愿意工作的唯一原因是工作所带来的报酬。只要能够获得令人满意的报酬，工作内容便无关紧要。</p></li><li><p>其他提高工作满意度的工作模型被有意无意地忽略或无视。</p></li><li><p>他指的是所谓人类的天性，很大一部分是周围社会环境的产物，这本身便是人类的天性。</p></li><li><p>饱含挑战性、意义、成就感和满足感的工作场所。</p></li><li><p>工作仅仅看作为了生存必须要做的事情时，人们只在乎报酬，如果其他工作能提供更高的报酬，那么他们随时可能换工作。他们迫不及待地想要退休，也并不鼓励和希望他们的朋友或孩子像他们那样，重蹈他们的覆辙。这种现象也正是亚当·斯密关于工作的观点的具体体现。 当人们将从事的工作视为“职业”时，他们会获取更多的成就感，也会有更多的自主权，甚至会很享受自己的工作。但是他们关注的是自己的提升和进步，认为沿着这一轨迹能不断升职、获取更高的薪酬、找到更好的工作。</p></li><li><p>因此可以说，只要员工将“正确”的态度带入工作中，他们就能从任何一份工作中找到意义；反之，如果将“错误”的态度带入工作中，则任何一份工作都将失去意义，变得索然无味。</p></li><li><p>在一个购买汽车、有线电视、手机和电脑成为生活常态的社会中，从事令人不开心的工作是人们为了享受好的物质生活所要付出的代价。</p></li><li><p>正如劳动心理学研究专家皮特所指出的那样，为了让我们对自己的工作满意，我们有必要给自己从事的工作赋予意义。</p></li><li><p>当人们将自己做的事情仅仅当成一份养家糊口的“工作”来看待的时候，人们很难从工作中获得自主性，也很难从中获取成就感。</p></li><li><p>人们如何看待自己的工作很大程度上并不是由工作本身决定的，而是由这个人是谁决定的，他们是谁决定了他们在工作中的态度</p></li><li><p>如果工作中缺少自主性、意义和满意度，工作具有的“使命感”就会减少，从事这项工作的满意度也会下降，员工也不会把这份工作做得很好。</p></li><li><p>流水线分工所带来的一个重要但常被人忽略的后果便是将工作的掌控权从员工的手中转移到了那些管理流水线的主管们手中。</p></li><li><p>因此，出于效率和管理的需求，经理们会打压像卢克和卡洛塔这种不循规蹈矩，不按“本分”工作的人。</p></li><li><p>工作没有改变，报酬也没有改变，仅仅因为目睹了他们的努力给他人带来的幸福，他们的工作效率便提高了两倍。这就是赋予工作的意义后产生的巨大能量。</p></li><li><p>大家都想找到一份自己喜爱的工作，如果工作本身充满挑战性和成就感，工作中能发挥你的特长，提高你的技能，工作中你有很大的自主性，你感觉自己是团队的一份子，你深受同事的尊重，这些因素都将有助于你喜欢上自己的工作。更重要的是，如果这份工作的目标是有利于社会而且充满意义的，就更能让你爱上你的工作了。</p></li><li><p>但仅靠员工在心理层面将一份索然无味的工作视为充满意义，这是不够的。</p></li><li><p>也应该试图在内心告诉自己，自己做的事情是有意义和有追求的。也就是说，并不需要耗费太多，就能将几乎任何一份工作变得富有意义。这样做不仅对职工有好处，对服务的客户和员工所在的组织都是有益处的。</p></li><li><p>关于人们并不喜欢工作的这种思想的影响力一直存在。这种思想源自亚当·斯密，并在其后的传播过程中不断被包装。</p></li><li><p>公司减少员工的自主性、工作的成就感和工作的意义，员工对工作的满意度也就下降了，他们好好工作的动力就下降了，而当员工努力工作的动力下降后，他们的上级就会收回更多的工作自主性。</p></li><li><p>当员工从工作中找到了意义和成就感时，他们就更加愿意工作。</p></li><li><p>在我长大成人的道路上，我做了一些“好”工作，也做了一些“坏”工作。其实好工作与坏工作就工作职责本身没有太大的区别，更多地是我们赋予了工作何种额外的意义。</p></li><li><p>这里我们将会调查如何将一份“好”工作变成“坏”工作，其实很大程度上是一个错误假设的结果。这个假设便是，那些正在工作的人们其实并不愿意待在这儿，所以公司需要去监视和激励他们好好工作。</p></li><li><p>在客户服务中心工作，公司会给员工发放非常详尽的工作守则让他们去遵守。当员工分散在世界各国，彼此间隔着遥远的距离，而且语言方面也存在困难，在这种情况下，为员工制定详细的工作守则是十分必要的；否则，他们对产品和服务将知之甚少，更无法回答客户关于产品和服务的各项问题。</p></li><li><p>当人们有此类工作需要去做的时候，他们已经被剥夺了我们在上一章里所谈到的工作的意义和工作的成就感了。</p></li><li><p>意识形态如何按照这种方法变成真的？有以下基本动因： 首先，通过改变人们看待自身行为的方式，意识形态能够由假变真。举例来说，一位每周都在流民收容所义务工作的志愿者有一天看到一本书，书上说自私是人类的天性，他或许会对自己说：“我原以为我的行为是无私的，现在社会科学</p></li><li><p>如果类似这种重新定义出现，那么无需外在环境的任何变化，人们也会开始从不同的角度看待自己的行为。而我们看待自身当下行为的方式很可能会影响我们未来的行动。这一点不难想象，举例来说，随着“人们只是为了钱而工作”这种意识形态在我们的文化中蔓延恣肆，像卢克、本、卡洛塔、科里这样原本已经稀有的员工将会完全消失。</p></li><li><p>很明显，有关工作场所的种种预言的实现也遵循着同样的过程。慢慢地你会相信，人们天性懒惰，没有人愿意工作，即使工作，他们关心的也只有报酬。</p></li><li><p>“表现目标导向”的孩子希望证明他们的能力，而“掌握目标导向”的孩子希望提高他们的能力。</p></li><li><p>另外一些孩子却认为智力不是一成不变的——智力可以不断提高，人可以变得更加聪明。这些孩子倾向于“掌握目标导向”。那么智力是不是固定的呢？这很大程度上取决于你是否相信它是固定的。也就是说关于“智力是天生固定的”这一说法很有可能是一种偏见。</p></li><li><p>意识形态对人们行为的影响很大程度上取决于这套意识形态渗入人们所处文化中的深度、广度和显著度。如果意识形态只在某个孤立的地方流行，那么它的影响将小得多，并且也更容易被纠正。但如果意识形态渗入社会的各个角落，那么它的影响将会深远得多。</p></li><li><p>之所以有这种想法，当然是拜亚当·斯密所赐，因为他提出的观点便是：人们会去工作，唯一的目的就是为了钱。如果不需要工资，他们就不会去工作了。从来没有人明白具体地阐述过这一观点，因为这种观点是如此的天经地义，以至于根本不需要明说。这便是观念最可怕的地方</p></li><li><p>如果你认为人们缺乏在工作中做出灵活判断的能力，你便会制定更加详细的指导条例，结果，员工从来没有机会去提高自身灵活判断的能力。你对你监视的那些员工的自律能力缺乏信任，你便会给员工强加更多的规则，并对员工实施更严格的监督。</p></li><li><p>深信建立和运营一个组织如果光靠诸如员工渴望从事有意义的工作是非常脆弱的，因此他们并不打算在工作中培养员工对工作意义的渴望，相反，他们所做的在某种程度上恰恰削弱了员工对工作意义的渴望。不久之后，有意义的工作便消失了，从教室、从法庭、从考场逐渐消失。</p></li><li><p>我之所以关注工作的结构以及工作环境，是因为我相信在一个认为工作毫无意义的极端环境中，个体无法真正发挥出自己的聪明才智。但我也并不赞成对员工完全放任。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
 body {
    /* font-family: &quot;宋体&quot;, SimSun, serif; */
    font-size: 16px;
  }
   p {
    line-height: 1.7;
  }
&lt;/style&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="管理" scheme="https://jinzbone.github.io/categories/%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="管理" scheme="https://jinzbone.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>我的天才女友</title>
    <link href="https://jinzbone.github.io/2024/08/20/%E6%88%91%E7%9A%84%E5%A4%A9%E6%89%8D%E5%A5%B3%E5%8F%8B/"/>
    <id>https://jinzbone.github.io/2024/08/20/%E6%88%91%E7%9A%84%E5%A4%A9%E6%89%8D%E5%A5%B3%E5%8F%8B/</id>
    <published>2024-08-20T10:27:29.000Z</published>
    <updated>2024-08-22T15:31:45.740Z</updated>
    
    <content type="html"><![CDATA[<style> body {    /* font-family: "宋体", SimSun, serif; */    font-size: 16px;  }   p {    line-height: 1.7;  }</style><ul><li><p>在那个灰暗的早晨，老师向我们展示出了这一点，我最清晰的记忆是听到这个消息之后的那种虚弱感。</p></li><li><p>我学习特别努力，除了学习之外我还投身于很多艰难的事情，那些距离我很远的事情，就是为了跟上那个女生，那个可怕、耀眼的女生。</p></li><li><p>但那个早上最重要的发现，是我们逃避危险的方式，逃避那些我们无法掌控、真实存在的危险。这个方法就是：我不是故意的。恩佐不是故意加入这场比赛的，他也不是故意击败阿方索的。莉拉有意击败恩佐，但她无意让阿方索出局，也不是故意让他丢脸，那只是必要的一步。这样做的缘由是我们确信：要事先规划好自己的行动，知道自己在做什么，这样就能预测后果。</p></li><li><p>夏天来了，她开始用一种很难形容的态度对待我。我看得出她很焦虑，和以前一样有攻击性，我很高兴，因为我了解她，同时我也感觉到，在她那种惯用的方式背后隐藏着痛苦，这让我很难受。她很痛苦，我不喜欢她痛苦。我更喜欢那个和我不一样的她，那个不会有焦虑的莉拉。我发现她的脆弱之处，这让我觉得很不舒服，这种不舒服暗地里转化成了一种优越感。</p></li><li><p>“我们没钱让你补课，但你可以自学，看看能不能通过考试。”我很不安地看着她。她还是以前的样子：头发干枯，斜眼，大鼻子，身躯肥胖。她补充说：“没人说这样做不行。”她就说了这些话，或者说我只记得这些话。从那天开始我就自学起来，我要求自己不去院子和小公园里。</p></li><li><p>我一直在学习。对我来说，读书几乎是一种乐趣。我很快就发现，当莉拉不再紧跟我，在学习和阅读上超过我，学校以及费拉罗老师的图书馆已经不再是一种历险，而是成为我非常擅长的事情，我得到很多鼓励和表扬。</p></li><li><p>她对我在学校的事情一点也不感兴趣，总是充满热情地谈论她父亲和哥哥的工作，语气里充满了崇敬。</p></li><li><p>那个阶段一直都是这样。我很快发现：我一个人，无论做任何事情都没办法心情澎湃，只有莉拉触及的事情，才会变得重要。假如她远离、远离了我所做的事情，那这些事就会沾染污垢，落满灰尘：中学、拉丁语、老师和书籍，我觉得书上的文字远没有加工一只鞋子迷人，这让我很抑郁。</p></li><li><p>忽然间她好像有些痛苦，她接着说，她说什么卡梅拉都会信以为真，院子里的女生全一样。“我不想说了，我不想和任何人说话了。”</p></li><li><p>或者我从费拉罗老师的图书馆借来的其他精彩小说，甚至是“圣灵”的问题，他只是听着，可能是因为害羞，也可能是因为无知，他说不出任何一句可以促进我进一步思考的话。</p></li><li><p>我需要表达自己，我脑子里全是乱糟糟的想法。我去找莉拉，尤其是学校放假的时候，我们会见面交谈。</p></li><li><p>你嫁错了人了，莉娜！我的眼睛看得很准：你看看，你多么擅长和人打交道啊，这对我们很有用。我们联手的话，用不了几年，整个那不勒斯都是我们的了，我们想干嘛就干嘛。”说到这里，他就会凑上来亲她。</p></li><li><p>他带着怨气列举了一连串事情：“争论的时候，你的声音太大了，别人让你小声的时候，你马上就和别人吵起来了，自言自语地和做讲座的人搭话也不合时宜，你不应该那么做。” 莉拉知道自己不应该那么做，但她确信在和尼诺在一起，一切都是可能的，包括跨越人与人之间的距离，和那些重要的人物对话。在索拉拉的鞋店里，她不是经常和一些重要人物打交道吗？要不是通过她的一个客户，他怎么能在《晨报》上发表他的第一篇文章？那又怎么样呢？“你太害羞了，”她对他说，“你不明白，你要比他们都好，</p></li><li><p>我突然发现我退学的愿望变得不再那么强烈，我不再想听天由命，嫁给安东尼奥，生活在他母亲家里，和他的几个弟弟妹妹生活在一起，在加油站给汽车加油。我决定采取行动，先帮助他恢复正常，然后摆脱这段关系。</p></li><li><p>她说这些话，就好像把保障莉拉的权利放在首位，绝不会让她的权益遭到哥哥的侵害。事实上我们都知道，她只不过是在维护她自己的将来罢了。</p></li><li><p>我的心情好了，第二天我去拜访奥利维耶罗老师。我有些不情愿，因为我要告诉她，我那学期成绩不是很理想，但我必须去拜访她，我还得小心地提醒她帮我弄到高二的课本。</p></li><li><p>是的，假如她重新开始学习，那简直太好了。回到小学时代，她永远是第一名，我永远是第二名，她会重新赋予学习意义，因为她知道赋予学习什么样的意义。一直跟在她的后面，我就会觉得安全而且强大。是的，是的，是的，我们要重新开始。</p></li><li><p>但是我觉得这三份报纸对我来说都很难懂，那就像看系列漫画书，从中间捡起来一本看，却不知道之前发生了什么。因此我一个专栏一个专栏地翻阅，不是出于个人兴趣，而是出于义务，就像学校里的功课一样，我希望我今天看不懂的地方，如果坚持下去，总有一天能看懂。</p></li><li><p>她忽然说，即使再也不上学了，她也能做好多事情，那就好像是为了向我炫耀一样。最后她有些神经质地笑了，瞥了我一眼，想看我的反应。</p></li><li><p>但这种状态持续的时间很短，她用手指抚摸了一下自己的前额，那是她经常做的一个动作，有些懊悔地说：“我一直都要证明自己是最棒的。”她有些阴郁，接着说：“我们这个地方刚开张的时候，斯特凡诺教我怎么在秤上耍手腕，我对他说，你是个骗子！小偷！这就是你赚钱的方法，但结果是我没能抵抗住诱惑，我不仅马上学会了他的手段，而且还找到了一种更好的办法，甚至还展示给他看，我脑子里总是会出现各种新的想法：我欺骗了你们所有人，我在秤上耍手段，还在其他很多事情上耍心机，我欺骗了整个城区，不要相信我，莱农！你不要相信我对你说的和我所做的。”</p></li><li><p>那天的聚会对她伤害多大，是我后来在她的笔记本里才看到的。她承认是她自己要求陪我去的，她说她以为这样就可以暂时脱离肉食店一个晚上，可以和我度过一个愉快的夜晚，见证和参与我的越来越宽广的世界，认识加利亚尼老师，和她交谈；她说她相信自己一定不会丢脸。她在笔记本中写道，她很确信男人都喜欢她，她一直都很招男人喜欢。但那天晚上，她感觉自己没有话说，没有魅力，不知道该做什么，也不美丽。她记下了所有细节：当我们挨着站在一起的时候，所有人都和我讲话，都只和我讲话，他们把吃的喝的递给我，没有人照顾她。阿尔曼多给我展示了一幅他们家祖传的画，那是一幅十七世纪的古画，他给我介绍了足足有一刻钟，他根本就无视了莉拉的存在，就好像她什么都不懂一样。没人在意她，没有人想知道她是什么样的人。那天晚上，她第一次感到她的生活永远都会围绕着斯特凡诺和肉食店，围绕着她哥哥和皮诺奇娅的婚姻，她的生活只能是和帕斯卡莱以及卡门聊天，还有和索拉拉兄弟低俗的斗争。这都是她记在笔记本里的，可能是当天晚上记的，也可能是第二天早上在肉食店里记的。当时，在当场，她感觉到一种彻底的自我迷失。</p></li><li><p>时间一天天过去了，我觉得自己的生活越来越没意思，这种感觉一直在滋长，在八月十五号之后爆发了，我觉得很抑郁。我每天很早就要起床，跑到迈佐卡农内大街，在那里忙碌一天，回到家里时已经精疲力竭。我脑子里塞满了我在学校里学到的成千上万的句子，但却没有机会展示出来。</p></li><li><p>她们俩都觉得，尼诺对我既没兴趣，也不友好。我想，让她们那么觉着也好，我很慎重地保守着我的秘密。最后她们一致认为，一个像我这样出色的女学生，尼诺连看都没看一眼，她们完全被忽视，也是可以接受的，她们会原谅他的。我想保护他，让他免受她们的刁难，我做到了这一点——她们好像很快忘掉了他。</p></li><li><p>这个世界上的每样东西都生死未定，都充满了风险，那些不接受风险的人，那些不了解命运的人，在角落里日渐衰落。我忽然明白为什么我没能拥有尼诺，而莉拉能够拥有他。我不能追随那些真实的感情，我无法使自己打破陈规旧矩，我没有莉拉那么强烈的情感，她可以不顾一切去享受那一天一夜。我总是落在后面，总是在等待，而她总是去主动获取她想要的东西，让她充满激情的东西，她总是竭尽所能，根本就不害怕别人的鄙视、讥笑和唾骂，也不害怕挨打。总之，她应该拥有尼诺，因为她认为自己是爱他的，这就意味着她可以主动占有他，而不是希望他采取主动。</p></li><li><p>假如我学习那些他不知道的东西，他用得着的时候，我会告诉他，这样我就对他有用了。我要改变一下，莱农，马上要改变。</p></li><li><p>至于我，从那时候开始，我决定只为我自己活着。从回到那不勒斯开始，我就是这么做的，我决定和莉拉划清界限。</p></li><li><p>我知道她是什么样的人，即使尼诺放弃她了，她也不会放弃尼诺。但我马上抑制住了我的这种想法，因为我想遵守我和自己的约定：我要过自己的生活，把他们排除在外，并不再为此痛苦。出于这个目的，我开始了一种自我心理训练，对于她的出现基本上不做出任何反应。我学会了控制和淡化自己的情感：假如书店老板的手伸向了我，我会心平气和地推开；假如那些来卖书的顾客非常不礼貌，我也会不露声色，该怎么做就怎么做；甚至是在我母亲面前，我也能做到柔声细语。每天我都想：我命该如此，我要听天由命，接受现实。我出生在这个城市，说这种方言，我没有钱。我付出我所能付出的，获得我所能获得的，忍受那些该忍受的事情。</p></li><li><p>我投入到我的学习中去，我拼命增加学习时间，使自己日日夜夜都很忙碌。那一年，我玩命地学习，甚至有些钻牛角尖，但同时我也接了一些家教，挣了不少钱。我给自己设定了铁一般的纪律：要比小时候的学习方法更加严格。每天的时间都是安排好的，从凌晨起来一直到深夜，像一条直线。在过去因为有莉拉，我有时候会偏离轨道，有一些惊喜和新发现。现在，我要从自己身上发掘所有的潜力。我已经十九岁了，我不能依靠任何人了，我永远也不需要任何人！</p></li><li><p>在永远离开那所中学，在毫无遗憾地离开那栋灰色的、破破烂烂的建筑之前，在我的眼里，它唯一的价值就是尼诺也在那里上过课。我看见了加利亚尼老师，过去和她打招呼。她恭喜我得到了那么优异的成绩，但她的语气里没有热情，也没有给我推荐夏季要读的书，更没有问我拿到了高中毕业证之后会干什么。</p><blockquote><p>是吗？</p></blockquote></li><li><p>我按时参加考试，学习时还是采用那种严格的自我要求和自我约束。我太害怕考试成绩不好，让我失去我费尽心机得到的“人间天堂”——我自己的空间、我自己的床、我自己的写字台、我自己的椅子、我自己的书，书——很多书。</p></li><li><p>即使是在读科幻小说，也要用“研究”这个动词；对于每一种研究过的资料，都要做一些资料详细小卡片。每次当我读到那些讲述社会不平等的文章或者片段时，我都很激动，然后收集下来。</p></li><li><p>另外，他的妻子还常拿鞋子的事情刺激他，她阅读的爱好也回来了，总是大半个晚上都沉浸在小说、杂志和报纸里，好像对真实生活已经失去了兴趣。</p></li><li><p>另一方面是丈夫的不满，简直让她没法应付，确切地讲，她走投无路，根本想不出办法。但莉拉并没有坐以待毙，对于她来说，世界就好像一盘棋，只要移开一道绘制的背景，移动一下棋子，就可以别开生面。</p><blockquote><p>事情都有解决的办法，不停去想，尽力而为。</p></blockquote></li><li><p>莉拉早就预感到了：她哥哥和父亲会被踢开，索拉拉兄弟会把一切都据为己有，斯特凡诺会被牵着鼻子走，会越来越依赖他们。如果是在刚开始，这种情景一定会让她很恼怒，但在那个时候，她在笔记本上写道，她觉得这一切都无所谓。当然，里诺的情况让她揪心，他的小老板身份已经快维持不下去了，这让她难过，尤其是他现在结婚生子了。现在在她眼里，所有那些过去的关系已经没有太大意义，</p></li><li><p>一方面，她继续扮演一位年轻太太的角色，让鞋店的生意有了神奇的转机，富有创新性；从另一个方面来说，她为尼诺读书，为他学习，为他思考。因为也有一些比较重要的人物会出现在鞋店里，她觉得这些人会对尼诺有用，就和他们套近乎。</p></li><li><p>在我家里，我的家人都俨然觉得我是一个重要人物，是那种匆匆打个招呼就要走开的人物。我父亲心满意足地看着我，我感觉到了他的满意，假如我和他说话，他甚至会窘迫。他没有问我学的是什么，学的东西会有什么用，之后会做什么工作，这不是因为他不想知道，而是担心听不懂我的回答。我的母亲总是气呼呼地在家里走来走去，我听到她特有的脚步声，我想我当时多么害怕变成她那个样子啊。但幸运的是，我现在已经远离她了，和她完全不一样了，她也感觉到我的心思。包括现在，她跟我说话的时候，好像发生那些糟糕的事情全是我的错：在任何时候，我都能感觉到她声音里的那种不满。和过去不同的是，现在她再也不让我洗碗、收拾桌子、擦地板了。和我的弟弟妹妹在一起，我也有些尴尬，他们很费劲地和我说意大利语，他们还经常纠正自己说错的地方，自己也觉得不好意思。但我和他们在一起，尽量表现得和之前一样，他们慢慢地也习惯了。</p></li><li><p>恩佐再也没有出现。让人惊异的是，他最后取得了工业管理的证书，他通过自考，艰难地取得了一个证书，这让我觉得很好奇。我想，谁能想到呢。在回到比萨之前，我想办法联系到了他，我们一起散步，聊了一会儿。我非常热烈地恭喜他获得的成就，他做了一个表情，表示那没什么大不了的。</p></li><li><p>尽管我进步很大，但我还是担心自己不够出色，担心自己说错话，担心别人发现了我的无知，担心自己不知道众所周知的事儿。当弗朗科从我的生活中消失之后，恐惧又一次占了上风，而且我证实了一件我本来就心知肚明的事情：他的富裕、良好的教养，在学生中他作为左派代表人物的声望，他的社交广泛，甚至他对校内外权威人物进行批判时的勇气，让他无论走到哪里都自带光环，我作为他的女朋友或者说伴侣，这种光环自然而然也折射到了我身上，几乎可以说，单是他爱我这件事，就公开证明了我的能力，但他被学校开除了之后，从那时候起，我的形象也开始褪色，同学们不再围着我转了：那些出身很好的同学周末不再邀请我和他们一起出行，或者参加聚会，甚至有人又开始嘲笑我的那不勒斯口音。弗朗科过去送给我的那些衣服也过时了，在我的身上变旧。我很快明白，弗朗科出现在我的生命中，掩盖了我的真实处境，但并没有改变它，我还是无法真正融入到这个环境中。</p></li><li><p>我是那种日日夜夜都在努力学习的人，那种成绩很好的学生，受到同学的欣赏和认可，但我永远都不可能达到一种真正的高水平。我一直都会很害怕：害怕说错话，害怕语调太高，害怕衣服穿得不得体，害怕表现得猥琐，害怕自己没有真正的思想。</p></li><li><p>你喜欢浪费钱？你没有汽车，要驾照做什么？” “车下一步再说。” “你想买汽车，嗯？你到底存了多少钱？” “那不关你的事儿。”</p></li><li><p>“你先闭一下嘴，不要惹我的火，我们好好说。我们都很清楚，那些在神父面前结婚，又举行了一场盛宴的人，婚姻后来可能会非常糟糕。”</p><blockquote><p>莱农比莉拉幸运的是有一个可以沟通的爸爸，有一个真心爱她的妈妈。</p></blockquote></li><li><p>这些事刺激着我，时不时会让我很激动。我强迫自己更新知识，了解时事，至少在刚开始，我的目的是想出风头。长期以来，我都相信，所有一切都是可以学习的，包括政治热情。</p></li><li><p>我真是太可怜了，一心一意地追求学业，基本上没怎么去过电影院，从来都没有买过碟片，我从来都没有成为某些歌手的追随者，没收集过歌手签名，我从来都没去听过音乐会，我从来都没有喝醉过，我少数的性经验也是偷偷摸摸地，在不安中、在担惊受怕中进行的。但这些女生呢，她们的状态都差不多，她们应该活得很潇洒，面对这种彻底的改变，她们要比我更加有准备，如果有机会，我一定会和她们一样。也许，她们觉得出现在那里，出现在那种氛围里，不是一件出格的事情，而是一种正确、迫切的选择。我现在有一点儿钱了，我不知道还会赚到多少钱，我想，我可以弥补一些已经失去的东西。哦，或者不行，我太学究了，太无知了，太有控制力了，太习惯于冷静地生活，存储那些思想和数据，我太接近于婚姻和最后的归宿了，总之我太愚钝了，我把自己安置在已经日薄西山的秩序里。想到最后一点，我有些害怕。我想，我要马上离开这个地方，这里每个动作，每句话，都是对我付出的努力的嘲弄，但我没走，而是挤进了拥挤的教室。</p></li><li><p>阿黛尔觉得那套房子还需要整修，同时彼得罗总是很忙，我们的婚礼就从秋季推到了春天，这使得我母亲借机就问我要钱。我尽量避免和她产生矛盾，我向她表示，我没有忘记自己的娘家和出身。电话装好了之后，我让人粉刷了厨房和走廊，还在餐厅墙上贴上了酒红色的墙纸，我给埃莉莎买了一件大衣，我分期付款买了一台电视机。后来，我也给自己送了一个礼物——我注册了驾驶学校，很容易就通过了考试，我拿到了驾照。</p></li><li><p>那你为什么不认命呢？这都是因为你的脑子平静不下来，它一直都在转动：设计鞋子，想方设法建立起一家鞋子作坊，重写尼诺的文章，逼着他按照你的思路来，让恩佐和你一起，用你自己的方式，使用苏黎世函授课程的材料。现在，你想给娜迪雅展示出：假如她要搞革命，你要比她更革命。你的脑子，是的，最根本的原因在这里，因为你的脑子不满意，现在你的身体也垮了。她想：我对自己感到厌烦，我也厌烦这所有的一切。我对詹纳罗也感到厌烦：假如事情顺利的话，他的命运，让他也只能当个工人，为了多挣五个里拉，会在某个老板面前奴颜屈膝。那你该怎么办？</p></li><li><p>我非常好奇，我想看看，我从小就看到的那股恶势力，现在变成了什么样子——他们那种欺压别人的低俗乐趣，逍遥法外的犯罪行为、对法律的阳奉阴违——披上了什么样的华丽外衣。索拉拉兄弟生来就爱炫富，爱排场。</p></li><li><p>这时候，我开始慢慢形成了一种意识——但不是很清晰，我觉得我不用太考虑他，我并没感觉到太痛苦。那不仅仅是之前的一种担忧，担心他会离开我，而是一种视角的变化。我不再想很远的事情，我开始考虑当下的事儿，我不能期待着尼诺给我更多，而是我自己要掂量一下，他给的够不够。</p></li><li><p>总之，我觉得他对权威的认同很敏感，而另一方面，他会因为嫉妒排斥或者羞辱那些还没有权威，或者权威很小但有可能取得成功的人。这让他在我心目中的形象，还有他维护的自我形象遭到了破坏。</p></li><li><p>现在，这个念头一直萦绕在我的心头，莉拉用她犀利的眼光，看到了我的这个想法。这是她最喜欢的游戏——我想——她就是这样对待恩佐、卡门、安东尼奥和阿方索的，她一定也是用同样的办法对付米凯莱·索拉拉和吉耀拉的。她假装自己是一个友好、温情的人，但实际上，只要她轻轻碰你一下，挪动一下你，就会把你毁掉。她也想这样对我，对尼诺。她一下子就看清了在我内心的轻微波动，说透了我试着掩盖的想法。</p></li><li><p>我说的不仅仅是黛黛和艾尔莎的不安，而是莉拉一针见血地揭示了我隐藏了很久的心事，那是在大约十二年前，我在马丽娅罗莎家里怀抱着米尔科时感受到的母性，那是一种非理性的冲动，就像受到爱的驱使，完全席卷了我。我那时候已经感觉到，那不是仅仅想要一个孩子，而是想要一个具体的孩子，一个像米尔科的孩子，也就是尼诺的孩子。</p></li><li><p>在地震的那几秒里，她忽然褪去了一切武装，和一分钟前成为了截然不同的一个人——之前，她是那么的工于心计，能控制自己的思想、语言和动作，但在当时的情况下，好像这些武装都没有用。她是另一个女人，她又一次成为了我在一九五八年元旦夜里看到的那个人，卡拉奇家和索拉拉家的烟火战争开始之后的那个女孩，或者是把我叫到圣约翰·特杜奇奥的那个女人，那时候她在布鲁诺·索卡沃的工厂里工作，她觉得自己得了严重的心脏病，确信自己要死了，想把詹纳罗托付给我。在过去，两个莉拉之间的联系还在，但我眼前这个女人好像直接从地里冒出来的，她一点儿也不像几分钟前，我嫉妒的那个女人——特别擅长遣词造句，说什么都很能打动人，现在她们就连面部的线条也不一样了，眼前这个莉拉因为恐惧，面部变得扭曲。</p></li><li><p>在伊斯基亚时，虽然我挺高兴的，心里充满爱，但没有用，我的脑袋还是会看到别的东西——上面，下面，侧面——还是能看到让我害怕的东西。比如说在布鲁诺的工厂里，动物的骨头在我的手指下裂开，轻轻碰一下，就会有散发着臭味的骨髓流出来，我感到那么恶心，我以为我生病了，后来我真的生病了。我心脏有杂音吗？没有。还是头脑的问题。我没办法停下来，我要一直做这做那：掩盖、揭发、加固又忽然拆掉、破坏。比如说阿方索，从小他都让我很不舒服，我感觉把他缝在一起的棉线正要裂开。米凯莱呢？他觉得自己特别了不起，但我要做的只是找对线头，拽一下，哈哈哈！我把他的线拽断了，我把他的线头和阿方索的线头绑在一起，男性和男性，他们的材料混合在一起。我白天编，晚上拆，脑子就是这么指挥我的。但这也没什么用，恐惧还在，我一直都有这种怀疑，它在正常事物之间的空隙里，一直在那里等待着。从今晚开始，我更确信这一点：莱农，一切都那么易碎，包括在我的肚子里这个小生物，看起来是长久的，但实际上却不是这样。莱农，你记不记得，我和斯特凡诺结婚时，想让这个城区从头开始，只有美好的事情，让之前那些丑恶的事儿不会再有？那个阶段持续了多久？好的意愿是很脆弱的，在我身上，爱也很脆弱。对于一个男人的爱持续不了多久，对于孩子的爱也持续不了很久，很快就会出现破绽。你看看那些破洞，你会看到好意和恶意混合在一起。詹纳罗让我充满愧疚，我肚子里的这个小家伙是一种责任，他在抓我，在切割着我。爱和恨在一起涌动，我受不了，我没办法一直投入到一种好的意愿里。奥利维耶罗老师说得对，我很坏，我连一份友谊都没办法保持。莱农，你对我很好，很有耐心。但今天晚上，我彻底明白了一件事情：即使没有地震，也有一种溶剂在缓慢起作用，很温和，但会把一切都消融。因此，拜托了，假如我得罪你，假如我对你说了一些难听的话，你要捂住耳朵，我不想说这些，但我说了。求求你，求求你，不要离开我，我会跌倒起不来的。”</p></li><li><p>莱农，你对我很好，很有耐心。但今天晚上，我彻底明白了一件事情：即使没有地震，也有一种溶剂在缓慢起作用，很温和，但会把一切都消融。因此，拜托了，假如我得罪你，假如我对你说了一些难听的话，你要捂住耳朵，我不想说这些，但我说了。求求你，求求你，不要离开我，我会跌倒起不来的。</p></li><li><p>即使她一直在主宰着一切，即使一直以来甚至是现在她还是决定着一切，把自己的意愿强加于人，她做不到，她也不相信这一点，她的怨恨和愤怒让人同情，她感觉自己就像一滴岩浆，她的所有努力最终来说只是保证自己不要裂开。虽然她工于心计，能控制人和事情，但她的状态是不稳定的，莉拉会失去自己，好像是唯一的事实是混乱。</p></li><li><p>我在城区里遇到了越来越多让人闹心的事，都是莉拉让我看到的东西，我总是太晚发现，而且我自己也卷入了一些复杂的、很难厘清的事情。除此之外，我还打破了回到那不勒斯时我给自己立的一条规矩：不要被我出生的城区吞没。</p></li><li><p>“莉拉鼓励我学她，她很高兴我做出的努力，她喜欢看到我这个样子，也很高兴这在米凯莱身上起作用了，我也很高兴。”</p></li><li><p>她临死时确信：按照我的性格，还有我积累的资源，我不会被任何东西摧毁。这种想法一直在我的脑子里回响，后来真的起了作用。我决定向她证明，她说得对，我打起精神，严格要求自己，开始利用那些空暇读书写作。</p></li><li><p>现在我在听尼诺说话时，已经没有我小时候的感受：他之前说的每个字，都会在我的心里激起火花。我让他看一段还不成型的稿子，他马上会大声说：“很棒！”我给他简述了我正在构思的小说的故事主线和人物，他会说：“很精彩，很聪明。”但他的话对我没有任何说服力，我不相信他，他对其他很多女人写的东西表现出了同样热情洋溢的态度。</p></li><li><p>那时候，我还想要什么呢？我之前谁也不是，现在终于变成了一个有分量的人了。是因为这个缘故，阿黛尔·艾罗塔才打电话给我，好像要和我和解，因为这个缘故，尼诺·萨拉托雷才会想着祈求我的原谅，想回到我的床上，因为这个缘故，到处都请我去演讲。当然，要和几个孩子分开，不能履行母亲的职责，对我来说很难。但那种撕裂感逐渐也成了我习以为常的东西。那种愧疚感，很快就被要取得公众认可的热望所取代。</p></li><li><p>这些都是空话，莱农！这个人只在乎卖书。</p></li><li><p>我忽然想到，这是莉拉的错，她总是那么热衷于强迫其他人，把所有东西都搅乱，让他失去了自己。莉拉暗地里利用了他，后来任凭他自生自灭。</p><blockquote><p>强迫别人按自己的意愿做事，其实没什么不对。有的人不知道自己想做什么、该做什么，那这样的人就只能听别人的安排。弱肉强食，是生存法则。</p></blockquote></li><li><p>你说谎，我记得你以前很喜欢。” “不，你记错了，是恩佐喜欢，我是强迫自己喜欢。” “那你找点别的事情做。” “我现在这样就很好，恩佐心不在焉，假如我不帮他的话，那公司就要关门了。”</p></li><li><p>为了鼓励她，我说：“和你交谈对我有好处，能促进我思考。” 我的话好像让她高兴起来了，她嘟哝了一句：“我知道自己对你有用，我感觉好多了。”很快，她为了展示自己对我有用，就说了一些要么难懂要么没头没尾的话。</p></li><li><p>我还有一份稿子要马上交（我要给以女性身体为主题的一期杂志写稿子），我一点儿也不想写，也没力气写。</p></li><li><p>外面刮起了冷风，窗户玻璃在抖动，窗扇闭合不是很好，刀片一样的风会吹到屋里来。星期五那天，恩佐过来跟我说，他要去阿维利诺一趟，因为他的一个老姑姑病了。至于里诺，他星期六和星期天会在斯特凡诺那儿，因为斯特凡诺让他帮忙把肉食店的家具拆下来，送到买下这些家具的某个人那里。就剩下莉拉一个人在家，恩佐说她有些抑郁，让我多陪陪她。但我很累，我刚有了一点儿思路，黛黛一会儿叫我，伊玛需要我，艾尔莎在抗议，我的想法就全没了。皮诺奇娅来收拾屋子时，我让她做了很多饭，把星期六和星期天的饭都做好了，然后我把自己关在卧室里，在小书桌前开始工作。</p><blockquote><p>不管怎么样，认真地活着，认真地记录，对自己诚实。我存在过。</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
 body {
    /* font-family: &quot;宋体&quot;, SimSun, serif; */
    font-size: 16px;
  }
   p {
    line-height: 1.7;
  }
&lt;/style&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="阅读" scheme="https://jinzbone.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="小说" scheme="https://jinzbone.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
</feed>
